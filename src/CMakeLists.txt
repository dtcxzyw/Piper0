cmake_minimum_required (VERSION 3.20)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

find_package(range-v3 CONFIG REQUIRED)
find_package(TBB CONFIG REQUIRED)
find_package(glm CONFIG REQUIRED)
find_package(cxxopts CONFIG REQUIRED)
find_package(Boost REQUIRED system)
find_package(ftxui CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(magic_enum CONFIG REQUIRED)
find_package(OpenImageDenoise CONFIG REQUIRED)
find_package(embree CONFIG REQUIRED)
find_package(openvkl CONFIG REQUIRED)
find_package(OpenColorIO CONFIG REQUIRED)
find_package(simdjson CONFIG REQUIRED)
find_path(PCG_INCLUDE_DIRS "pcg_extras.hpp")
find_package(assimp CONFIG REQUIRED)
find_package(IlmBase CONFIG REQUIRED)
find_package(OpenEXR CONFIG REQUIRED)
find_package(OpenImageIO CONFIG REQUIRED)
find_program(ISPC_EXECUTABLE ispc PATHS ${EMBREE_INCLUDE_DIRS}/../../../ispc/latest/bin/ DOC "Path to the ISPC executable.")
file(GLOB_RECURSE PIPER_SRC "*.cpp")
file(GLOB_RECURSE PIPER_CLI_SRC "CLI/*.cpp")
list(REMOVE_ITEM PIPER_SRC ${PIPER_CLI_SRC})
file(GLOB_RECURSE PIPER_ISPC_SRC "*.ispc")

set(ISPC_TARGETS "avx2;avx512skx-i32x16")

#Please refer to https://github.com/embree/embree/blob/master/common/cmake/ispc.cmake
SET(ISPC_TARGET_EXT ${CMAKE_CXX_OUTPUT_EXTENSION})
STRING(REPLACE ";" "," ISPC_TARGET_ARGS "${ISPC_TARGETS}")

IF (CMAKE_SIZEOF_VOID_P EQUAL 8)
    IF (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm64|aarch64")
        SET(ISPC_ARCHITECTURE "aarch64")
    ELSE()
        SET(ISPC_ARCHITECTURE "x86-64")
    ENDIF()
ELSE()
    MESSAGE(ERROR "x86 is not supported.")
ENDIF()

SET(ISPC_TARGET_DIR "${CMAKE_CURRENT_BINARY_DIR}")

IF(ISPC_INCLUDE_DIR)
STRING(REPLACE ";" ";-I;" ISPC_INCLUDE_DIR_PARMS "${ISPC_INCLUDE_DIR}")
SET(ISPC_INCLUDE_DIR_PARMS "-I" ${ISPC_INCLUDE_DIR_PARMS})
ENDIF()

IF (WIN32 OR "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
SET(ISPC_OPT_FLAGS -O3)
ELSE()
SET(ISPC_OPT_FLAGS -O2)
ENDIF()

SET(ISPC_OBJECTS "")
SET(ISPC_ADDITIONAL_ARGS "")

FOREACH(src ${PIPER_ISPC_SRC})
    GET_FILENAME_COMPONENT(fname ${src} NAME_WE)
    GET_FILENAME_COMPONENT(dir ${src} PATH)

    SET(outdir "${ISPC_TARGET_DIR}")
    SET(input "${src}")

    SET(deps "")
    IF (EXISTS ${outdir}/${fname}.dev.idep)
        FILE(READ ${outdir}/${fname}.dev.idep contents)
        STRING(REPLACE " " ";"     contents "${contents}")
        STRING(REPLACE ";" "\\\\;" contents "${contents}")
        STRING(REPLACE "\n" ";"    contents "${contents}")
        FOREACH(dep ${contents})
            IF (EXISTS ${dep})
                SET(deps ${deps} ${dep})
            ENDIF (EXISTS ${dep})
        ENDFOREACH(dep ${contents})
    ENDIF ()

    SET(results "${outdir}/${fname}.dev${ISPC_TARGET_EXT}")
    
    LIST(LENGTH ISPC_TARGETS NUM_TARGETS)
    IF (NUM_TARGETS GREATER 1)
        FOREACH(target ${ISPC_TARGETS})
            IF (${target} STREQUAL "avx512skx-i32x16")
                SET(target "avx512skx")
            ENDIF()
            SET(results ${results} "${outdir}/${fname}.dev_${target}${ISPC_TARGET_EXT}")
        ENDFOREACH()
    ENDIF()

    ADD_CUSTOM_COMMAND(
    OUTPUT ${results} "${ISPC_TARGET_DIR}/${fname}_ispc.h"
    COMMAND ${CMAKE_COMMAND} -E make_directory ${outdir}
    COMMAND ${ISPC_EXECUTABLE}
    -I "${CMAKE_CURRENT_SOURCE_DIR}"
    ${ISPC_INCLUDE_DIR_PARMS}
    ${ISPC_DEFINITIONS}
    --arch=${ISPC_ARCHITECTURE}
    --addressing=64
    ${ISPC_OPT_FLAGS}
    --target=${ISPC_TARGET_ARGS}
    --woff
    --opt=fast-math
    ${ISPC_ADDITIONAL_ARGS}
    -h "${ISPC_TARGET_DIR}/${fname}_ispc.h"
    -MMM  ${outdir}/${fname}.dev.idep
    -o ${outdir}/${fname}.dev${ISPC_TARGET_EXT}
    ${input}
    DEPENDS ${input} ${deps}
    COMMENT "Building ISPC object ${outdir}/${fname}.dev${ISPC_TARGET_EXT}"
    )

    SET(ISPC_OBJECTS ${ISPC_OBJECTS} ${results})
ENDFOREACH()

add_executable(PiperRGB2SpecOpt Spectrum/RGB2SpecOpt.cpp)
target_compile_definitions(PiperRGB2SpecOpt PRIVATE PIPER_RGB2SPEC_OPT_STANDALONE)
target_link_libraries(PiperRGB2SpecOpt PRIVATE TBB::tbb TBB::tbbmalloc TBB::tbbmalloc_proxy)
target_link_libraries(PiperRGB2SpecOpt PRIVATE glm::glm)

if("${PIPER_PRECOMPUTED_RGB2SPEC}" STREQUAL "")
	if(CMAKE_BUILD_TYPE MATCHES Debug)
		message(WARNING "Please put rgb2spec.data generated by PiperRGB2SpecOpt manually.")
	else()
		add_custom_command(TARGET PiperRGB2SpecOpt POST_BUILD
            COMMAND PiperRGB2SpecOpt 128
            DEPENDS PiperRGB2SpecOpt
            WORKING_DIRECTORY $<TARGET_FILE_DIR:PiperRGB2SpecOpt>
            )
	endif()
else()
add_custom_command(TARGET PiperRGB2SpecOpt POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PIPER_PRECOMPUTED_RGB2SPEC} $<TARGET_FILE_DIR:PiperRGB2SpecOpt>
)
endif()

add_library(Piper ${PIPER_SRC} ${ISPC_OBJECTS})
target_include_directories(Piper PUBLIC ${PCG_INCLUDE_DIRS})
target_link_libraries(Piper PUBLIC range-v3 range-v3-meta range-v3::meta range-v3-concepts)
target_link_libraries(Piper PUBLIC TBB::tbb TBB::tbbmalloc TBB::tbbmalloc_proxy)
target_link_libraries(Piper PUBLIC glm::glm)
target_link_libraries(Piper PUBLIC fmt::fmt)
target_link_libraries(Piper PUBLIC magic_enum::magic_enum)
#target_link_libraries(Piper PRIVATE OpenColorIO::OpenColorIO)
target_link_libraries(Piper PRIVATE OpenImageDenoise embree)
target_link_libraries(Piper PRIVATE simdjson::simdjson)
target_link_libraries(Piper PRIVATE assimp::assimp)
target_link_libraries(Piper PRIVATE IlmBase::Iex IlmBase::Half IlmBase::Imath IlmBase::IexMath)
target_link_libraries(Piper PRIVATE OpenEXR::IlmImf OpenEXR::IlmImfUtil OpenEXR::IlmImfConfig)
#target_link_libraries(Piper PRIVATE OpenImageIO::OpenImageIO OpenImageIO::OpenImageIO_Util)

add_executable(PiperCLI ${PIPER_CLI_SRC} $<TARGET_OBJECTS:Piper>) #NOTICE: directly link objects for static factory
target_include_directories(PiperCLI PRIVATE ${RANG_INCLUDE_DIRS})
target_link_libraries(PiperCLI PRIVATE cxxopts::cxxopts)
target_link_libraries(PiperCLI PRIVATE ftxui::dom ftxui::screen ftxui::component)
target_link_libraries(PiperCLI PRIVATE Piper)

add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:OpenImageDenoise> $<TARGET_FILE_DIR:PiperCLI>
)
add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:embree> $<TARGET_FILE_DIR:PiperCLI>
)
add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:TBB::tbb> $<TARGET_FILE_DIR:PiperCLI>
)
add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:TBB::tbbmalloc> $<TARGET_FILE_DIR:PiperCLI>
)
add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:TBB::tbbmalloc_proxy> $<TARGET_FILE_DIR:PiperCLI>
)
add_custom_command(TARGET PiperCLI POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/data $<TARGET_FILE_DIR:PiperCLI>/data
)
