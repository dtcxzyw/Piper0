/*
    SPDX-License-Identifier: GPL-3.0-or-later

    This file is part of Piper0, a physically based renderer.
    Copyright (C) 2022 Yingwei Zheng

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma once
// ReSharper disable CppClangTidyClangDiagnosticImplicitFloatConversion
#include <Piper/Render/SpectralLUTUtil.hpp>

PIPER_NAMESPACE_BEGIN

// CIE Standard illuminant for D65
// Please refer to http://cvrl.ioo.ucl.ac.uk/cie.htm

/* parse script:

import csv

X = []

with open("Illuminantd65.csv") as f:
    reader = csv.reader(f)
    for row in reader:
        wavelength = int(row[0])
        if wavelength >= 360 and wavelength <= 830:
            X.append(row[1])

print('{'+','.join(X)+'}')

*/

static constexpr double standardIlluminantD65[spectralLUTSize] = {
    46.638300,  47.183400,  47.728500,  48.273500,  48.818600,  49.363700,  49.908800,  50.453900,  50.998900,  51.544000,  52.089100,
    51.877700,  51.666400,  51.455000,  51.243700,  51.032300,  50.820900,  50.609600,  50.398200,  50.186900,  49.975500,  50.442800,
    50.910000,  51.377300,  51.844600,  52.311800,  52.779100,  53.246400,  53.713700,  54.180900,  54.648200,  57.458900,  60.269500,
    63.080200,  65.890900,  68.701500,  71.512200,  74.322900,  77.133600,  79.944200,  82.754900,  83.628000,  84.501100,  85.374200,
    86.247300,  87.120400,  87.993600,  88.866700,  89.739800,  90.612900,  91.486000,  91.680600,  91.875200,  92.069700,  92.264300,
    92.458900,  92.653500,  92.848100,  93.042600,  93.237200,  93.431800,  92.756800,  92.081900,  91.406900,  90.732000,  90.057000,
    89.382100,  88.707100,  88.032200,  87.357200,  86.682300,  88.500600,  90.318800,  92.137100,  93.955400,  95.773600,  97.591900,
    99.410200,  101.228000, 103.047000, 104.865000, 106.079000, 107.294000, 108.508000, 109.722000, 110.936000, 112.151000, 113.365000,
    114.579000, 115.794000, 117.008000, 117.088000, 117.169000, 117.249000, 117.330000, 117.410000, 117.490000, 117.571000, 117.651000,
    117.732000, 117.812000, 117.517000, 117.222000, 116.927000, 116.632000, 116.336000, 116.041000, 115.746000, 115.451000, 115.156000,
    114.861000, 114.967000, 115.073000, 115.180000, 115.286000, 115.392000, 115.498000, 115.604000, 115.711000, 115.817000, 115.923000,
    115.212000, 114.501000, 113.789000, 113.078000, 112.367000, 111.656000, 110.945000, 110.233000, 109.522000, 108.811000, 108.865000,
    108.920000, 108.974000, 109.028000, 109.082000, 109.137000, 109.191000, 109.245000, 109.300000, 109.354000, 109.199000, 109.044000,
    108.888000, 108.733000, 108.578000, 108.423000, 108.268000, 108.112000, 107.957000, 107.802000, 107.501000, 107.200000, 106.898000,
    106.597000, 106.296000, 105.995000, 105.694000, 105.392000, 105.091000, 104.790000, 105.080000, 105.370000, 105.660000, 105.950000,
    106.239000, 106.529000, 106.819000, 107.109000, 107.399000, 107.689000, 107.361000, 107.032000, 106.704000, 106.375000, 106.047000,
    105.719000, 105.390000, 105.062000, 104.733000, 104.405000, 104.369000, 104.333000, 104.297000, 104.261000, 104.225000, 104.190000,
    104.154000, 104.118000, 104.082000, 104.046000, 103.641000, 103.237000, 102.832000, 102.428000, 102.023000, 101.618000, 101.214000,
    100.809000, 100.405000, 100.000000, 99.633400,  99.266800,  98.900300,  98.533700,  98.167100,  97.800500,  97.433900,  97.067400,
    96.700800,  96.334200,  96.279600,  96.225000,  96.170300,  96.115700,  96.061100,  96.006500,  95.951900,  95.897200,  95.842600,
    95.788000,  95.077800,  94.367500,  93.657300,  92.947000,  92.236800,  91.526600,  90.816300,  90.106100,  89.395800,  88.685600,
    88.817700,  88.949700,  89.081800,  89.213800,  89.345900,  89.478000,  89.610000,  89.742100,  89.874100,  90.006200,  89.965500,
    89.924800,  89.884100,  89.843400,  89.802600,  89.761900,  89.721200,  89.680500,  89.639800,  89.599100,  89.409100,  89.219000,
    89.029000,  88.838900,  88.648900,  88.458900,  88.268800,  88.078800,  87.888700,  87.698700,  87.257700,  86.816700,  86.375700,
    85.934700,  85.493600,  85.052600,  84.611600,  84.170600,  83.729600,  83.288600,  83.329700,  83.370700,  83.411800,  83.452800,
    83.493900,  83.535000,  83.576000,  83.617100,  83.658100,  83.699200,  83.332000,  82.964700,  82.597500,  82.230200,  81.863000,
    81.495800,  81.128500,  80.761300,  80.394000,  80.026800,  80.045600,  80.064400,  80.083100,  80.101900,  80.120700,  80.139500,
    80.158300,  80.177000,  80.195800,  80.214600,  80.420900,  80.627200,  80.833600,  81.039900,  81.246200,  81.452500,  81.658800,
    81.865200,  82.071500,  82.277800,  81.878400,  81.479100,  81.079700,  80.680400,  80.281000,  79.881600,  79.482300,  79.082900,
    78.683600,  78.284200,  77.427900,  76.571600,  75.715300,  74.859000,  74.002700,  73.146500,  72.290200,  71.433900,  70.577600,
    69.721300,  69.910100,  70.098900,  70.287600,  70.476400,  70.665200,  70.854000,  71.042800,  71.231500,  71.420300,  71.609100,
    71.883100,  72.157100,  72.431100,  72.705100,  72.979000,  73.253000,  73.527000,  73.801000,  74.075000,  74.349000,  73.074500,
    71.800000,  70.525500,  69.251000,  67.976500,  66.702000,  65.427500,  64.153000,  62.878500,  61.604000,  62.432200,  63.260300,
    64.088500,  64.916600,  65.744800,  66.573000,  67.401100,  68.229300,  69.057400,  69.885600,  70.405700,  70.925900,  71.446000,
    71.966200,  72.486300,  73.006400,  73.526600,  74.046700,  74.566900,  75.087000,  73.937600,  72.788100,  71.638700,  70.489300,
    69.339800,  68.190400,  67.041000,  65.891600,  64.742100,  63.592700,  61.875200,  60.157800,  58.440300,  56.722900,  55.005400,
    53.288000,  51.570500,  49.853100,  48.135600,  46.418200,  48.456900,  50.495600,  52.534400,  54.573100,  56.611800,  58.650500,
    60.689200,  62.728000,  64.766700,  66.805400,  66.463100,  66.120900,  65.778600,  65.436400,  65.094100,  64.751800,  64.409600,
    64.067300,  63.725100,  63.382800,  63.474900,  63.567000,  63.659200,  63.751300,  63.843400,  63.935500,  64.027600,  64.119800,
    64.211900,  64.304000,  63.818800,  63.333600,  62.848400,  62.363200,  61.877900,  61.392700,  60.907500,  60.422300,  59.937100,
    59.451900,  58.702600,  57.953300,  57.204000,  56.454700,  55.705400,  54.956200,  54.206900,  53.457600,  52.708300,  51.959000,
    52.507200,  53.055300,  53.603500,  54.151600,  54.699800,  55.248000,  55.796100,  56.344300,  56.892400,  57.440600,  57.727800,
    58.015000,  58.302200,  58.589400,  58.876500,  59.163700,  59.450900,  59.738100,  60.025300,  60.312500
};

constexpr double wavelength2IlluminantD65(const double lambda) noexcept {
    const auto [idx0, idx1, u] = locateWavelength(lambda);
    constexpr auto normalizationFactor = 10566.864005283874576;
    return lerp(standardIlluminantD65, idx0, idx1, u) / normalizationFactor;
}

PIPER_NAMESPACE_END
